{
  "metadata": {
    "source_video": "Intro to Algorithms_ Crash Course Computer Science #13.mp4",
    "generated_on": "2025-09-14T15:04:58.831Z",
    "type": "knowledge_graph",
    "node_count": 13,
    "edge_count": 12
  },
  "nodes": [
    {
      "id": "node_0",
      "label": "Introduction to Algorithms",
      "x": 379.4212026792009,
      "y": 171.60288021903477,
      "size": 20,
      "color": "hsl(0, 70%, 60%)",
      "timestamps": [
        0,
        30,
        60,
        76,
        135,
        165,
        255,
        285,
        300,
        345,
        375,
        390,
        405
      ],
      "description": "Introduces the concept of algorithms and their importance in computer science. Mentions previous episodes covering programming in Python or Java.  Highlights that multiple algorithms can achieve the same result, emphasizing the importance of efficiency.",
      "category": "prerequisite",
      "isActive": false
    },
    {
      "id": "node_1",
      "label": "What are Algorithms?",
      "x": 218.24096522860685,
      "y": 190.82783095631294,
      "size": 17,
      "color": "hsl(60, 70%, 60%)",
      "timestamps": [
        0,
        30,
        60
      ],
      "description": "Introduces the concept of algorithms and their importance in computer science. Mentions previous episodes covering programming in Python or Java.  Highlights that multiple algorithms can achieve the same result, emphasizing the importance of efficiency.",
      "category": "prerequisite",
      "isActive": false
    },
    {
      "id": "node_2",
      "label": "Definition and Importance",
      "x": 266.47460100215346,
      "y": 218.7543127260675,
      "size": 14,
      "color": "hsl(120, 70%, 60%)",
      "timestamps": [
        0
      ],
      "description": "Introduces the concept of algorithms and their importance in computer science. Mentions previous episodes covering programming in Python or Java.  Highlights that multiple algorithms can achieve the same result, emphasizing the importance of efficiency.",
      "category": "prerequisite",
      "isActive": false
    },
    {
      "id": "node_3",
      "label": "Example: Calculating Exponents",
      "x": 191.52446786042034,
      "y": 176.52067372601982,
      "size": 14,
      "color": "hsl(150, 70%, 60%)",
      "timestamps": [
        30
      ],
      "description": "Uses the example of calculating exponents to illustrate different algorithms and their varying efficiencies.  Discusses factors beyond just steps, such as memory usage.",
      "category": "example",
      "isActive": false
    },
    {
      "id": "node_4",
      "label": "Historical Context: Al-Khwarizmi",
      "x": 495.72193745717817,
      "y": 321.8006612673229,
      "size": 14,
      "color": "hsl(180, 70%, 60%)",
      "timestamps": [
        60
      ],
      "description": "Briefly explains the historical origins of the term 'algorithm,' connecting it to the Persian polymath Muhammad ibn Musa al-Khwarizmi and his contributions to algebra. Connects this historical context to the development of computer science.",
      "category": "definition",
      "isActive": false
    },
    {
      "id": "node_5",
      "label": "Sorting Algorithms",
      "x": 492.4233308298833,
      "y": 279.41928647550276,
      "size": 17,
      "color": "hsl(90, 70%, 60%)",
      "timestamps": [
        76,
        135,
        165,
        255
      ],
      "description": "Introduces the sorting problem and provides a real-world example (airfare prices).  Explains the concept of an array.  Step-by-step explanation of the selection sort algorithm with a numerical example, showing the process of finding the smallest number and swapping it to its correct position.",
      "category": "application",
      "isActive": false
    },
    {
      "id": "node_6",
      "label": "Selection Sort",
      "x": 333.8283523176872,
      "y": 197.26545935434933,
      "size": 14,
      "color": "hsl(120, 70%, 60%)",
      "timestamps": [
        76,
        135
      ],
      "description": "Introduces the sorting problem and provides a real-world example (airfare prices).  Explains the concept of an array.  Step-by-step explanation of the selection sort algorithm with a numerical example, showing the process of finding the smallest number and swapping it to its correct position.",
      "category": "application",
      "isActive": false
    },
    {
      "id": "node_7",
      "label": "Merge Sort",
      "x": 455.7303497474283,
      "y": 318.01431337763927,
      "size": 14,
      "color": "hsl(150, 70%, 60%)",
      "timestamps": [],
      "description": "No description available",
      "category": "definition",
      "isActive": false
    },
    {
      "id": "node_8",
      "label": "Big O Notation and Efficiency",
      "x": 166.82708028817572,
      "y": 220.76964263312414,
      "size": 14,
      "color": "hsl(180, 70%, 60%)",
      "timestamps": [
        165,
        255
      ],
      "description": "Introduces Big O notation as a way to characterize the complexity of an algorithm.  Explains how the selection sort algorithm has a complexity of O(n^2), illustrating the impact of increasing input size on running time with a numerical example (array size 8 vs. 80).",
      "category": "definition",
      "isActive": false
    },
    {
      "id": "node_9",
      "label": "Graph Search Algorithms",
      "x": 461.1099561371322,
      "y": 226.6699286210183,
      "size": 17,
      "color": "hsl(120, 70%, 60%)",
      "timestamps": [
        285,
        300,
        345,
        375
      ],
      "description": "Introduces the concept of a graph as a network of nodes and edges, providing a real-world analogy (map with cities and roads). Explains the concept of cost or weight associated with edges.",
      "category": "definition",
      "isActive": false
    },
    {
      "id": "node_10",
      "label": "Introduction to Graphs",
      "x": 458.0168452419735,
      "y": 249.3452535396918,
      "size": 14,
      "color": "hsl(120, 70%, 60%)",
      "timestamps": [
        285
      ],
      "description": "Introduces the concept of a graph as a network of nodes and edges, providing a real-world analogy (map with cities and roads). Explains the concept of cost or weight associated with edges.",
      "category": "definition",
      "isActive": false
    },
    {
      "id": "node_11",
      "label": "Dijkstra's Algorithm",
      "x": 439.412892499719,
      "y": 223.13230550247567,
      "size": 14,
      "color": "hsl(150, 70%, 60%)",
      "timestamps": [
        300
      ],
      "description": "Introduces Dijkstra's algorithm as a solution to the shortest path problem in a graph.  Step-by-step explanation using a map example (Highgarden to Winterfell).  Shows how the algorithm iteratively finds the lowest cost path, updating costs as it explores new nodes.",
      "category": "application",
      "isActive": false
    },
    {
      "id": "node_12",
      "label": "Brute Force Approach vs. Dijkstra's",
      "x": 469.50084498429777,
      "y": 101.49282871568053,
      "size": 14,
      "color": "hsl(180, 70%, 60%)",
      "timestamps": [
        345,
        375
      ],
      "description": "Compares Dijkstra's algorithm to a brute-force approach for solving the graph problem.  Discusses the factorial complexity of the brute-force approach, highlighting its inefficiency compared to Dijkstra's algorithm.  Mentions improvements made to Dijkstra's original algorithm to enhance its efficiency.",
      "category": "definition",
      "isActive": false
    }
  ],
  "edges": [
    {
      "source": "node_0",
      "target": "node_1",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_1",
      "target": "node_2",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_1",
      "target": "node_3",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_1",
      "target": "node_4",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_0",
      "target": "node_5",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_5",
      "target": "node_6",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_5",
      "target": "node_7",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_5",
      "target": "node_8",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_0",
      "target": "node_9",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_9",
      "target": "node_10",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_9",
      "target": "node_11",
      "type": "related",
      "strength": 0.7
    },
    {
      "source": "node_9",
      "target": "node_12",
      "type": "related",
      "strength": 0.7
    }
  ]
}